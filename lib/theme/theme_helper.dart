import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.onError,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(11.h),
          ),
          shadowColor: appTheme.black900.withOpacity(0.19),
          elevation: 3,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blue50,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blue50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 30.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 25.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 13.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray600,
          fontSize: 10.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray50,
          fontSize: 8.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 22.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onSecondaryContainer.withOpacity(1),
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF756EF3),
    primaryContainer: Color(0X0F222222),
    secondary: Color(0X0F222222),
    secondaryContainer: Color(0XFF2B8CFF),
    tertiary: Color(0X0F222222),
    tertiaryContainer: Color(0XFF2B8CFF),

    // Background colors
    background: Color(0X0F222222),

    // Surface colors
    surface: Color(0X0F222222),
    surfaceTint: Color(0XFF010F07),
    surfaceVariant: Color(0XFF2B8CFF),

    // Error colors
    error: Color(0XFF010F07),
    errorContainer: Color(0XFF2D3D5C),
    onError: Color(0XFFEB4646),
    onErrorContainer: Color(0X33FFFFFF),

    // On colors(text colors)
    onBackground: Color(0XFFB1D199),
    onInverseSurface: Color(0XFFEB4646),
    onPrimary: Color(0XFF010F07),
    onPrimaryContainer: Color(0XFFB1D199),
    onSecondary: Color(0XFFB1D199),
    onSecondaryContainer: Color(0X7F002055),
    onTertiary: Color(0XFFB1D199),
    onTertiaryContainer: Color(0X7F002055),

    // Other colors
    outline: Color(0XFF010F07),
    outlineVariant: Color(0X0F222222),
    scrim: Color(0X0F222222),
    shadow: Color(0XFF010F07),

    // Inverse colors
    inversePrimary: Color(0X0F222222),
    inverseSurface: Color(0XFF010F07),

    // Pending colors
    onSurface: Color(0XFFB1D199),
    onSurfaceVariant: Color(0X7F002055),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue200 => Color(0XFF96BFFE);
  Color get blue300 => Color(0XFF63B4FF);
  Color get blue50 => Color(0XFFE8F0FF);
  Color get blueA400 => Color(0XFF347FFF);
  Color get blueA40014 => Color(0X14307BFA);

  // BlueGray
  Color get blueGray100 => Color(0XFFD0DAE9);
  Color get blueGray10001 => Color(0XFFD6D6D6);
  Color get blueGray300 => Color(0XFF82A4B2);
  Color get blueGray30001 => Color(0XFF9FA5C0);
  Color get blueGray30002 => Color(0XFF9CA3AF);
  Color get blueGray400 => Color(0XFF848A94);
  Color get blueGray40001 => Color(0XFF868D95);
  Color get blueGray40002 => Color(0XFF888888);
  Color get blueGray700 => Color(0XFF3D5480);
  Color get blueGray800 => Color(0XFF374151);
  Color get blueGray80001 => Color(0XFF2C3E50);
  Color get blueGray900 => Color(0XFF1F2937);

  // Cyan
  Color get cyan50 => Color(0XFFE3FFF8);

  // DeepPurple
  Color get deepPurpleA200 => Color(0XFF9C2CF3);

  // Gray
  Color get gray100 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFECECEC);
  Color get gray20001 => Color(0XFFF0F0F0);
  Color get gray20002 => Color(0XFFEFE6E6);
  Color get gray400 => Color(0XFFBDBDBD);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray5001 => Color(0XFFF8F8F8);
  Color get gray600 => Color(0XFF6B7280);

  // Graya
  Color get gray5001a => Color(0X1A969696);

  // Green
  Color get green400 => Color(0XFF45F056);
  Color get green50 => Color(0XFFE8FBDA);
  Color get green500 => Color(0XFF32B768);
  Color get greenA400 => Color(0XFF1FCC79);

  // Indigo
  Color get indigo100 => Color(0XFFC6C3FB);
  Color get indigo50 => Color(0XFFD8DEF3);
  Color get indigoA700 => Color(0XFF3A48F8);

  // Indigoc
  Color get indigo2000c => Color(0X0C8CA8D7);

  // LightBlue
  Color get lightBlue100 => Color(0XFFB9E8FF);
  Color get lightBlue50 => Color(0XFFD7ECFF);

  // Orange
  Color get orange100 => Color(0XFFFFD8AC);
  Color get orange10001 => Color(0XFFFFD7A8);
  Color get orange300 => Color(0XFFFFB35A);
  Color get orange50 => Color(0XFFFBECDA);

  // Red
  Color get red300 => Color(0XFFF36E6E);
  Color get red400 => Color(0XFFF24E4E);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
